/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var NDPSO = __webpack_require__(1);

var _require = __webpack_require__(2),
    SimpleFacilityProblem = _require.SimpleFacilityProblem;

var city1990 = __webpack_require__(3);

window.problem = new SimpleFacilityProblem(city1990);
window.ndpso = new NDPSO(problem);
console.time('city1990');
window.gBest = ndpso.optimize();
console.timeEnd('city1990');

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NDPSO = function () {
  // set inertia(i) { 
  //     this.params.inertia = i;
  //     this.params.currentInertia = i;
  // }

  function NDPSO(problem) {
    _classCallCheck(this, NDPSO);

    this.social = 0.7;
    this.cognitive = 0.7;
    this.inertia = 0.7;
    this.inertialDiscount = 0.9995;
    this.swarmSize = 100;
    this.maxIterations = 1000;
    this.swarm = [];
    this.problem = problem;
  }

  _createClass(NDPSO, [{
    key: "optimize",
    value: function optimize() {
      this.initSwarm();
      var uBest = void 0,
          gBest = void 0;
      uBest = gBest = this.getGlobalBest();
      for (var iter = 0; iter < this.maxIterations; iter++) {
        gBest = this.updateSwarm(gBest);
        if (this.problem.isBetter(gBest.fitness, uBest.fitness)) {
          uBest = gBest;
        }
      }
      return uBest;
    }
  }, {
    key: "updateSwarm",
    value: function updateSwarm(gBest) {
      this.swarm.forEach(function (p) {
        return p.update(gBest);
      });
      return this.getGlobalBest();
    }
  }, {
    key: "initSwarm",
    value: function initSwarm() {
      if (this.swarm.length) {
        this.swarm.splice(0, this.swarm.length);
      }
      for (var i = 0; i < this.swarmSize; i++) {
        this.swarm.push(this.createParticle());
      }
    }
  }, {
    key: "createParticle",
    value: function createParticle() {
      var p = { position: this.getRandomPosition() };
      p.fitness = this.problem.calcFitness(p.position);
      p.pBestPos = p.position;
      p.pBestFit = p.fitness;
      var dpso = this;
      p.update = this.updateParticle.bind(this, p);
      return p;
    }
  }, {
    key: "getRandomPosition",
    value: function getRandomPosition() {
      var position = [];
      for (var i = 0; i < this.problem.numFacilities; i++) {
        var fac = void 0;
        do {
          fac = Math.floor(Math.random() * this.problem.potentialFacs);
        } while (position.includes(fac));
        position.push(fac);
      }
      return position;
    }
  }, {
    key: "getGlobalBest",
    value: function getGlobalBest() {
      return this.swarm.reduce(function (best, curr) {
        return curr.fitness < best.fitness ? curr : best;
      }, { fitness: Number.POSITIVE_INFINITY });
    }

    /**
     * Returns a new array of facilities, possibly with one facility changed
     *
     * @param {Array} position - a list of facility numbers
     * @param {Number} chance - the chance (0-1) that the position will mutate
     **/

  }, {
    key: "mutatePosition",
    value: function mutatePosition(position, chance) {
      var newPos = position.slice(0);
      if (Math.random() >= chance) {
        // return a copy of the unchanged position
        return newPos;
      }

      // switch out a single facility
      var indexToChange = Math.floor(Math.random() * newPos.length);
      var oldFac = newPos[indexToChange];
      var newFac = void 0;
      do {
        newFac = Math.floor(Math.random() * (this.problem.numFacilities + 1));
      } while (position.includes(newFac) || newFac === oldFac);
      newPos[indexToChange] = newFac;
      return newPos;
    }
  }, {
    key: "updateParticle",
    value: function updateParticle(particle, gBest) {
      var _this = this;

      var toMutate = [[gBest.position, this.social], [particle.pBestPos, this.cognitive], [particle.position, this.inertia]];
      // potential is a hashtable of positions indexed by fitness
      // there is a small issue: if two positions have the same fitness,
      // then the later-mutated position will overwrite the previous one
      // doesn't cause any problems
      // (if two positions have the same fitness, doesn't matter which one we pick)
      // but worth noting anyway
      var potential = toMutate.reduce(function (obj, arr) {
        var pos = _this.mutatePosition(arr[0], arr[1]);
        var fit = _this.problem.calcFitness(pos);
        obj[fit] = pos;
        return obj;
      }, {});

      // find best and assign to particle's current position/fitness
      // console.log(Object.keys(potential));
      particle.fitness = this.problem.getBestFitness(Object.keys(potential));
      particle.position = potential[particle.fitness];

      // update personal best
      if (this.problem.isBetter(particle.fitness, particle.pBestFit)) {
        particle.pBestPos = particle.position;
        particle.pBestFit = particle.fitness;
      }
    }
  }]);

  return NDPSO;
}();

module.exports = NDPSO;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Some enum objects + sample data
var OBJECTIVES = {
    MIN: 'minimize',
    MAX: 'maximize'
};
var AGGREGATES = {
    MIN: 'min',
    MAX: 'max',
    SUM: 'sum'
};

var MEASURES = {
    STAR: 'star',
    RADIUS: 'radius',
    RAY: 'ray'
};

var SIMPLE_COST_MATRIX = [[0, 1, 2, 3, 4], [1, 0, 2, 3, 3], [2, 2, 0, 4, 2], [3, 3, 4, 0, 1], [4, 3, 2, 1, 0]];

// A class for representing simple facility allocation problems
// i.e., a combination max/min, an aggregate function, and a measure
// e.g., MINIMIZE MAX STAR or MAXIMIZE MIN RADIUS

var SimpleFacilityProblem = function () {
    function SimpleFacilityProblem(attrs) {
        _classCallCheck(this, SimpleFacilityProblem);

        if (!attrs) {
            attrs = {};
        }
        this.objective = attrs.objective || OBJECTIVES.MIN;
        this.aggregate = attrs.aggregate || AGGREGATES.MAX;
        this.measure = attrs.measure || MEASURES.STAR;
        this.costs = attrs.costs || SIMPLE_COST_MATRIX;
        this.numFacilities = attrs.numFacilities || 2;
    }

    _createClass(SimpleFacilityProblem, [{
        key: 'assignCustomer',


        /**
         * Assigns customer to closest facility in facilities vector
         *
         * @param {number} cust - customer number (0-indexed)
         * @param {Array} facilities - array of potential facilities
         * @return {number} facility - the closest facility
         **/
        value: function assignCustomer(cust, facilities) {
            var costRow = this.costs[cust];
            var bestVal = void 0,
                bestFac = void 0;
            var fac = facilities[0];
            bestVal = costRow[fac];
            bestFac = fac;
            for (var i = 1; i < facilities.length; i++) {
                fac = facilities[i];
                if (this.isBetter(costRow[fac], bestVal)) {
                    bestVal = costRow[fac];
                    bestFac = fac;
                }
            }
            return [bestFac, bestVal];
        }
    }, {
        key: 'isBetter',
        value: function isBetter(left, right) {
            switch (this.objective) {
                case OBJECTIVES.MIN:
                    return left < right;
                case OBJECTIVES.MAX:
                    return right < left;
                default:
                    throw Error('objective type (' + this.objective + ') not recongized!');
            }
        }
    }, {
        key: 'getBetterFitness',
        value: function getBetterFitness(left, right) {
            switch (this.objective) {
                case OBJECTIVES.MIN:
                    return left < right ? left : right;
                case OBJECTIVES.MAX:
                    return left > right ? left : right;
                default:
                    throw Error('objective type (' + this.objective + ') not recognized!');
            }
        }
    }, {
        key: 'getBestFitness',
        value: function getBestFitness(fitnessArray) {
            switch (this.objective) {
                case OBJECTIVES.MIN:
                    return Math.min.apply(null, fitnessArray);
                case OBJECTIVES.MAX:
                    return Math.max.apply(null, fitnessArray);
                default:
                    throw Error('objective type(' + this.objective + ') not recognized!');
            }
        }
    }, {
        key: 'getMeasures',
        value: function getMeasures(facilities) {
            switch (this.measure) {
                case MEASURES.STAR:
                    return this._calcStars(facilities);
                case MEASURES.RADIUS:
                    return this._calcRadii(facilities);
                case MEASURES.RAY:
                    return this._calcRays(facilities);
                default:
                    throw Error('measure type (' + this.measure + ') not recognized!');
            }
        }
    }, {
        key: 'getAggregate',
        value: function getAggregate(measures) {
            // measures is an object keyed by facility number
            // pulling out the values makes them easier to manipulate,
            // especially since this function doesn't worry about 
            // returning a facility number with the aggregate val
            var values = Object.values(measures);
            switch (this.aggregate) {
                case AGGREGATES.MIN:
                    return values.reduce(function (min, val) {
                        return val < min ? val : min;
                    }, values[0]);
                case AGGREGATES.MAX:
                    return values.reduce(function (max, val) {
                        return val > max ? val : max;
                    }, values[0]);
                case AGGREGATES.SUM:
                    return values.reduce(function (sum, val) {
                        return sum += val;
                    }, 0);
            }
        }
    }, {
        key: 'calcFitness',
        value: function calcFitness(facilities) {
            var measures = this.getMeasures(facilities);
            return this.getAggregate(measures);
        }
    }, {
        key: '_calcStars',
        value: function _calcStars(facilities) {
            var _this = this;

            var stars = facilities.reduce(function (stars, fac) {
                stars[fac] = 0;
                return stars;
            }, {});
            return this.costs.reduce(function (stars, costRow, cust) {
                var _assignCustomer = _this.assignCustomer(cust, facilities),
                    _assignCustomer2 = _slicedToArray(_assignCustomer, 2),
                    fac = _assignCustomer2[0],
                    cost = _assignCustomer2[1];

                stars[fac] += cost;
                return stars;
            }, stars);
        }
    }, {
        key: '_calcRadii',
        value: function _calcRadii(facilities) {
            return {};
        }
    }, {
        key: '_calcRays',
        value: function _calcRays(facilities) {
            return {};
        }
    }, {
        key: 'problemName',
        get: function get() {
            return this.objective + ' ' + this.aggregate + ' ' + this.measure;
        }
    }, {
        key: 'potentialFacs',
        get: function get() {
            return this.costs.length;
        }
    }]);

    return SimpleFacilityProblem;
}();

module.exports = { SimpleFacilityProblem: SimpleFacilityProblem, OBJECTIVES: OBJECTIVES, AGGREGATES: AGGREGATES, MEASURES: MEASURES, SIMPLE_COST_MATRIX: SIMPLE_COST_MATRIX };

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = {"numFacilities":5,"costs":[[0,4494,1378,2405,136,4389,931,2414,3878,2699,4802,299,1223,4869,1289,906,1422,1699,354,336,4890,3366,777,1918,1360,3094,2596,2469,2413,4895,2066,4474,3790,1642,879,1254,445,3314,4836,603,4756,1979,2243,1067,1615,4601,2207,968,539,2358,1962,1999,676,472,1828,1969,2274,1562,1487,1934,277,3798,167,1080,4238,1453,2180,4926,1572,200,959,93,802,3239,296,3085,2751,4582,349,1836,4936,307,218,1119,3853,558,2663,384],[4494,0,3168,2343,4367,181,3626,2168,636,2044,469,4212,3275,554,3694,3590,3173,2842,4167,4810,1407,1218,3746,2876,3169,1467,2100,2111,2094,1219,2437,40,775,2852,3759,3399,4244,1182,528,3895,540,2738,2258,3427,3909,300,2351,3563,4051,2136,2752,2752,3978,4107,2826,2589,2273,3037,3217,2606,4761,929,4636,3493,974,3432,2324,1175,2931,4542,3752,4407,3702,1255,4198,1532,2173,520,4773,2659,1368,4218,4318,3379,1402,4974,2079,4695],[1378,3168,0,1431,1268,3080,461,1281,2575,1644,3446,1136,257,3510,1298,504,125,712,1106,1667,3514,2124,601,1198,573,1731,1530,1325,1171,3516,738,3151,2512,409,954,870,1270,2009,3477,783,3394,639,1001,416,1771,3250,834,410,888,1051,624,1189,1084,1108,984,593,906,210,958,850,1626,2426,1500,325,2859,1187,848,3547,284,1391,1034,1302,698,1927,1091,1712,1399,3217,1618,556,3559,1154,1245,460,2479,1812,1288,1530],[2405,2343,1431,0,2269,2196,1760,332,1710,313,2751,2105,1362,2832,1374,1606,1522,757,2051,2741,3233,1124,1802,546,1072,1378,242,356,608,3150,939,2312,1569,1025,1553,1166,2056,1244,2800,1874,2752,1534,638,1435,1569,2539,1151,1675,2110,815,1534,431,1778,1952,577,1193,1112,1460,946,580,2682,1987,2567,1687,2501,1112,927,3151,1154,2514,1511,2312,1621,1210,2127,1476,1786,2610,2736,936,3248,2100,2197,1347,2366,2950,1541,2703],[136,4367,1268,2269,0,4261,831,2280,3749,2564,4679,163,1101,4747,1166,785,1319,1565,218,473,4782,3234,670,1782,1226,2973,2460,2335,2283,4784,1944,4347,3660,1517,745,1119,339,3186,4714,486,4635,1879,2114,941,1510,4477,2091,860,471,2232,1863,1862,547,340,1691,1854,2156,1458,1352,1801,413,3680,301,979,4124,1322,2058,4813,1451,297,828,42,670,3112,177,2967,2651,4461,481,1711,4827,171,93,989,3746,692,2556,497],[4389,181,3080,2196,4261,0,3535,2037,511,1893,650,4104,3176,735,3556,3489,3091,2722,4057,4709,1569,1074,3650,2734,3053,1409,1954,1979,1980,1387,2344,141,627,2751,3637,3272,4127,1076,710,3793,720,2678,2147,3323,3758,477,2275,3470,3957,2038,2692,2611,3859,3994,2693,2509,2195,2958,3085,2485,4659,951,4534,3405,1082,3293,2232,1346,2836,4444,3627,4301,3593,1154,4093,1489,2153,684,4675,2560,1534,4109,4209,3271,1470,4878,2040,4601],[931,3626,461,1760,831,3535,0,1669,3028,2010,3907,718,400,3971,1213,239,491,1003,700,1208,3959,2560,168,1408,722,2192,1898,1718,1598,3968,1190,3609,2959,806,753,872,903,2461,3939,368,3855,1048,1425,353,1685,3711,1295,86,427,1499,1032,1438,792,743,1231,1054,1367,632,1052,1201,1169,2887,1043,148,3314,1198,1302,4000,704,930,863,861,429,2381,656,2172,1821,3678,1157,985,4006,742,824,454,2922,1351,1733,1069],[2414,2168,1281,332,2280,2037,1669,0,1532,376,2548,2117,1270,2626,1530,1554,1352,714,2067,2745,2957,971,1740,735,1053,1069,267,57,277,2885,670,2141,1413,875,1611,1238,2109,1012,2594,1844,2536,1266,343,1380,1798,2337,850,1588,2055,492,1269,610,1835,1986,657,932,802,1265,1049,481,2690,1713,2569,1572,2226,1270,633,2892,997,2499,1592,2322,1612,963,2124,1158,1457,2384,2728,736,2976,2118,2218,1306,2057,2939,1211,2677],[3878,636,2575,1710,3749,511,3028,1532,0,1416,1047,3592,2666,1131,3058,2978,2591,2212,3546,4198,1743,588,3141,2241,2542,951,1468,1475,1468,1599,1838,609,179,2241,3128,2764,3616,566,1099,3282,1065,2200,1636,2812,3279,837,1781,2962,3450,1530,2213,2117,3349,3482,2189,2012,1701,2460,2581,1975,4148,723,4023,2900,1088,2796,1727,1579,2327,3934,3118,3790,3081,647,3582,1052,1742,950,4165,2050,1730,3598,3698,2760,1305,4369,1597,4092],[2699,2044,1644,313,2564,1893,2010,376,1416,0,2462,2400,1610,2545,1687,1875,1720,1020,2347,3035,2997,828,2068,859,1350,1211,113,349,609,2901,1044,2012,1268,1234,1857,1472,2361,989,2513,2153,2470,1636,715,1702,1866,2251,1206,1927,2379,831,1640,744,2084,2252,877,1306,1150,1639,1255,809,2977,1755,2860,1924,2267,1425,998,2898,1360,2801,1820,2606,1907,970,2417,1327,1749,2334,3026,1108,3006,2397,2495,1619,2182,3239,1502,2986],[4802,469,3446,2751,4679,650,3907,2548,1047,2462,0,4528,3578,85,4079,3895,3436,3191,4486,5108,1032,1634,4038,3272,3508,1715,2509,2493,2440,827,2735,509,1209,3163,4106,3759,4580,1538,59,4199,131,2959,2596,3738,4320,212,2613,3851,4335,2451,2974,3147,4321,4437,3203,2855,2540,3297,3590,2960,5063,1051,4936,3768,844,3818,2621,771,3230,4834,4109,4717,4023,1597,4506,1748,2312,279,5063,2968,979,4537,4636,3699,1352,5259,2265,4976],[299,4212,1136,2105,163,4104,718,2117,3592,2400,4528,0,954,4596,1028,641,1196,1403,56,636,4649,3074,551,1620,1064,2826,2297,2173,2125,4646,1794,4191,3500,1364,588,957,262,3030,4563,355,4486,1759,1956,789,1399,4325,1950,736,423,2079,1743,1700,403,196,1528,1715,2013,1332,1190,1639,577,3535,463,864,3984,1170,1908,4675,1304,438,677,206,510,2956,101,2824,2529,4313,639,1559,4692,34,110,832,3615,852,2424,640],[1223,3275,257,1362,1101,3176,400,1270,2666,1610,3578,954,0,3646,1045,316,375,605,917,1534,3704,2178,478,1042,366,1872,1497,1321,1215,3696,843,3256,2588,425,701,625,1054,2100,3613,620,3534,880,1042,175,1520,3377,997,318,792,1138,866,1057,846,895,849,768,1059,462,742,800,1486,2580,1360,333,3032,950,957,3723,349,1268,778,1139,473,2022,927,1869,1622,3360,1498,616,3745,967,1064,203,2675,1703,1490,1429],[4869,554,3510,2832,4747,735,3971,2626,1131,2545,85,4596,3646,0,4157,3962,3498,3265,4555,5173,983,1717,4104,3352,3580,1779,2590,2571,2514,774,2803,594,1293,3232,4180,3834,4652,1615,33,4266,133,3015,2669,3807,4401,294,2676,3916,4399,2521,3030,3227,4394,4508,3280,2918,2604,3358,3667,3035,5129,1103,5002,3831,859,3897,2689,714,3297,4899,4183,4785,4092,1673,4573,1807,2357,312,5128,3037,925,4606,4705,3769,1372,5322,2318,5040],[1289,3694,1298,1374,1166,3556,1213,1530,3058,1687,4079,1028,1045,4157,0,974,1420,961,974,1603,4421,2482,1114,827,776,2505,1609,1586,1666,4372,1560,3666,2929,1194,493,440,851,2542,4124,1024,4065,1867,1539,925,478,3867,1804,1149,1286,1732,1856,946,625,832,877,1641,1832,1490,504,1156,1538,3202,1453,1270,3702,262,1651,4386,1237,1462,378,1205,801,2487,1102,2553,2522,3909,1637,1337,4449,1005,1075,848,3444,1838,2335,1663],[906,3590,504,1606,785,3489,239,1554,2978,1875,3895,641,316,3962,974,0,585,854,606,1219,4009,2482,198,1211,538,2188,1765,1606,1521,4005,1159,3571,2897,738,525,638,766,2413,3929,304,3850,1141,1349,173,1448,3694,1308,177,504,1453,1126,1253,600,603,1053,1074,1372,710,831,1074,1171,2895,1045,313,3343,961,1274,4033,666,957,630,822,212,2336,610,2183,1904,3676,1187,931,4052,656,751,259,2977,1395,1788,1125],[1422,3173,125,1522,1319,3091,491,1352,2591,1720,3436,1196,375,3498,1420,585,0,821,1171,1696,3468,2160,648,1314,699,1722,1607,1393,1220,3477,767,3158,2537,497,1061,995,1349,2027,3466,840,3380,562,1054,523,1894,3244,824,460,910,1080,547,1300,1179,1186,1097,584,900,142,1084,942,1659,2407,1533,343,2826,1313,871,3510,368,1417,1147,1350,789,1944,1142,1693,1333,3201,1640,616,3515,1217,1304,577,2431,1828,1242,1544],[1699,2842,712,757,1565,2722,1003,714,2212,1020,3191,1403,605,3265,961,854,821,0,1353,2031,3468,1675,1048,504,339,1558,911,769,751,3427,606,2818,2108,353,917,574,1405,1661,3232,1135,3165,1038,599,682,1352,2983,860,918,1359,777,1031,478,1136,1276,279,741,879,799,462,237,1976,2264,1855,935,2756,737,691,3444,468,1788,918,1607,898,1595,1410,1597,1589,3001,2015,409,3498,1404,1504,599,2483,2227,1386,1969],[354,4167,1106,2051,218,4057,700,2067,3546,2347,4486,56,917,4555,974,606,1171,1353,0,691,4616,3025,532,1565,1014,2786,2244,2123,2078,4612,1753,4146,3453,1323,532,901,237,2984,4522,333,4445,1734,1910,749,1351,4282,1914,712,439,2036,1718,1644,349,144,1474,1681,1976,1305,1134,1589,631,3496,519,844,3949,1114,1867,4639,1265,494,621,260,464,2911,137,2786,2503,4272,696,1517,4659,51,152,788,3583,908,2393,696],[336,4810,1667,2741,473,4709,1208,2745,4198,3035,5108,636,1534,5173,1603,1219,1696,2031,691,0,5160,3693,1069,2254,1692,3395,2931,2800,2737,5173,2375,4791,4114,1957,1213,1591,752,3633,5140,915,5059,2240,2566,1386,1894,4909,2501,1258,786,2673,2223,2335,1004,804,2164,2261,2571,1838,1823,2265,65,4094,176,1354,4522,1780,2489,5206,1880,280,1289,430,1133,3556,621,3379,3008,4882,104,2150,5208,643,550,1445,4122,237,2937,247],[4890,1407,3514,3233,4782,1569,3959,2957,1743,2997,1032,4649,3704,983,4421,4009,3468,3468,4616,5160,0,2240,4113,3686,3736,1916,3008,2909,2765,210,2906,1445,1921,3333,4333,4038,4756,2009,985,4297,909,2920,2882,3878,4746,1113,2709,3922,4374,2690,2936,3563,4525,4599,3559,2936,2654,3327,3916,3265,5125,1246,5001,3811,732,4175,2800,277,3363,4880,4363,4815,4176,2028,4605,1871,2159,886,5097,3148,79,4665,4759,3865,1038,5272,2226,4989],[3366,1218,2124,1124,3234,1074,2560,971,588,828,1634,3074,2178,1717,2482,2482,2160,1675,3025,3693,2240,0,2656,1660,2012,807,882,914,962,2122,1393,1188,446,1755,2582,2209,3078,327,1686,2782,1646,1858,1135,2311,2692,1423,1404,2487,2970,1080,1869,1537,2806,2951,1623,1609,1324,2041,2015,1437,3641,1048,3518,2443,1529,2219,1292,2111,1857,3438,2564,3276,2564,385,3073,944,1599,1517,3668,1575,2239,3077,3177,2248,1576,3877,1393,3607],[777,3746,601,1802,670,3650,168,1740,3141,2068,4038,551,478,4104,1114,198,648,1048,532,1069,4113,2656,0,1408,736,2325,1957,1792,1693,4118,1309,3728,3065,902,633,819,736,2574,4071,199,3989,1210,1521,367,1577,3840,1433,191,315,1611,1193,1452,641,576,1251,1193,1502,787,1022,1263,1026,3025,899,312,3461,1132,1422,4148,814,796,748,702,312,2495,494,2311,1981,3813,1026,1090,4158,575,658,457,3077,1228,1886,952],[1918,2876,1198,546,1782,2734,1408,735,2241,859,3272,1620,1042,3352,827,1211,1314,504,1565,2254,3686,1660,1408,0,686,1781,782,787,930,3620,1016,2847,2106,857,1044,663,1540,1744,3319,1437,3266,1526,851,1057,1062,3060,1274,1322,1694,1063,1521,125,1265,1452,227,1208,1269,1302,430,524,2192,2446,2084,1373,2957,566,1066,3627,971,2046,987,1825,1172,1697,1656,1853,1994,3116,2260,880,3707,1611,1704,957,2758,2473,1768,2242],[1360,3169,573,1072,1226,3053,722,1053,2542,1350,3508,1064,366,3580,776,538,699,339,1014,1692,3736,2012,736,686,0,1844,1243,1109,1075,3707,831,3146,2443,424,602,337,1075,1986,3547,803,3476,1092,913,374,1230,3301,1053,635,1038,1066,1081,718,813,940,515,871,1093,738,384,575,1637,2556,1517,690,3036,623,935,3727,460,1451,627,1268,559,1917,1071,1868,1756,3309,1678,591,3770,1065,1165,278,2730,1890,1582,1635],[3094,1467,1731,1378,2973,1409,2192,1069,951,1211,1715,2826,1872,1779,2505,2188,1722,1558,2786,3395,1916,807,2325,1781,1844,0,1184,1029,852,1869,1033,1457,967,1467,2446,2131,2898,496,1746,2490,1663,1271,966,2037,2835,1521,898,2137,2619,781,1285,1660,2650,2748,1644,1139,825,1583,2001,1349,3351,712,3225,2053,1198,2259,920,1886,1522,3120,2466,3011,2328,423,2799,137,814,1488,3349,1273,1943,2838,2936,2006,988,3543,647,3261],[2596,2100,1530,242,2460,1954,1898,267,1468,113,2509,2297,1497,2590,1609,1765,1607,911,2244,2931,3008,882,1957,782,1243,1184,0,248,516,2919,937,2070,1327,1121,1760,1376,2264,1009,2558,2045,2511,1532,610,1592,1811,2297,1109,1815,2269,739,1536,662,1987,2152,780,1200,1056,1526,1164,697,2873,1762,2756,1811,2276,1346,897,2919,1246,2695,1727,2503,1801,980,2312,1292,1677,2370,2920,996,3020,2294,2393,1510,2165,3133,1430,2878],[2469,2111,1325,356,2335,1979,1718,57,1475,349,2493,2173,1321,2571,1586,1606,1393,769,2123,2800,2909,914,1792,787,1109,1029,248,0,271,2836,694,2084,1356,921,1668,1295,2166,958,2538,1898,2482,1286,366,1433,1849,2281,861,1638,2107,493,1290,662,1892,2042,714,957,808,1303,1105,535,2745,1665,2624,1620,2178,1325,649,2842,1041,2553,1650,2377,1667,910,2179,1122,1446,2330,2782,776,2928,2174,2273,1360,2018,2993,1199,2730],[2413,2094,1171,608,2283,1980,1598,277,1468,609,2440,2125,1215,2514,1666,1521,1220,751,2078,2737,2765,962,1693,930,1075,852,516,271,0,2708,470,2071,1377,792,1668,1320,2150,911,2481,1822,2415,1040,172,1351,1983,2231,598,1524,2007,222,1045,812,1885,2014,795,724,541,1113,1165,521,2685,1536,2561,1484,2040,1414,400,2720,897,2478,1668,2324,1614,844,2118,923,1179,2253,2708,616,2789,2130,2230,1293,1828,2916,933,2644],[4895,1219,3516,3150,4784,1387,3968,2885,1599,2901,827,4646,3696,774,4372,4005,3477,3427,4612,5173,210,2122,4118,3620,3707,1869,2919,2836,2708,0,2882,1258,1778,3314,4308,4000,4743,1912,777,4298,707,2939,2834,3868,4682,921,2698,3926,4387,2650,2956,3495,4505,4588,3503,2930,2639,3336,3868,3217,5137,1173,5011,3820,671,4123,2773,71,3351,4894,4332,4818,4165,1939,4607,1839,2192,702,5115,3125,152,4661,4757,3850,1069,5294,2236,5010],[2066,2437,738,939,1944,2344,1190,670,1838,1044,2735,1794,843,2803,1560,1159,767,606,1753,2375,2906,1393,1309,1016,831,1033,937,694,470,2882,0,2420,1774,433,1427,1146,1866,1271,2770,1463,2691,597,328,1004,1959,2534,259,1126,1614,313,600,932,1623,1715,807,262,272,650,1068,491,2329,1745,2203,1062,2213,1343,114,2905,495,2105,1458,1982,1294,1190,1770,1043,988,2518,2335,242,2942,1805,1903,973,1899,2536,779,2257],[4474,40,3151,2312,4347,141,3609,2141,609,2012,509,4191,3256,594,3666,3571,3158,2818,4146,4791,1445,1188,3728,2847,3146,1457,2070,2084,2071,1258,2420,0,744,2833,3735,3373,4221,1161,569,3875,581,2728,2236,3407,3878,340,2337,3546,4034,2117,2742,2723,3955,4085,2799,2574,2259,3023,3190,2582,4742,936,4617,3476,1000,3404,2307,1215,2913,4524,3727,4387,3681,1235,4178,1525,2172,558,4754,2640,1407,4197,4297,3358,1420,4956,2074,4677],[3790,775,2512,1569,3660,627,2959,1413,179,1268,1209,3500,2588,1293,2929,2897,2537,2108,3453,4114,1921,446,3065,2106,2443,967,1327,1356,1377,1778,1774,744,0,2162,3020,2651,3514,517,1263,3199,1234,2176,1548,2728,3134,1001,1742,2890,3376,1461,2188,1984,3243,3384,2068,1965,1661,2410,2460,1870,4062,864,3938,2835,1259,2666,1666,1758,2256,3854,3006,3700,2990,604,3495,1083,1777,1125,4085,1975,1909,3504,3605,2670,1444,4291,1612,4017],[1642,2852,409,1025,1517,2751,806,875,2241,1234,3163,1364,425,3232,1194,738,497,353,1323,1957,3333,1755,902,857,424,1467,1121,921,792,3314,433,2833,2162,0,1001,759,1432,1675,3199,1042,3122,701,620,576,1631,2960,633,731,1215,716,692,823,1192,1281,631,447,680,452,742,444,1909,2179,1783,699,2645,1012,546,3337,129,1693,1042,1556,861,1598,1346,1476,1332,2950,1924,194,3371,1374,1473,539,2318,2129,1159,1854],[879,3759,954,1553,745,3637,753,1611,3128,1857,4106,588,701,4180,493,525,1061,917,532,1213,4333,2582,633,1044,602,2446,1760,1668,1668,4308,1427,3735,3020,1001,0,386,503,2579,4146,531,4077,1580,1511,538,944,3899,1634,702,794,1669,1567,1133,226,409,980,1428,1681,1163,614,1152,1151,3159,1046,838,3637,586,1534,4329,993,1026,115,788,325,2512,643,2468,2306,3910,1227,1184,4369,574,663,502,3320,1437,2153,1226],[1254,3399,870,1166,1119,3272,872,1238,2764,1472,3759,957,625,3834,440,638,995,574,901,1591,4038,2209,819,663,337,2131,1376,1295,1320,4000,1146,3373,2651,759,386,0,889,2224,3801,802,3735,1427,1173,537,902,3549,1380,794,1068,1350,1415,747,612,790,596,1206,1414,1055,233,798,1529,2838,1420,894,3329,330,1244,4018,796,1386,354,1161,537,2161,996,2166,2091,3572,1597,913,4069,947,1041,444,3043,1809,1911,1583],[445,4244,1270,2056,339,4127,903,2109,3616,2361,4580,262,1054,4652,851,766,1349,1405,237,752,4756,3078,736,1540,1075,2898,2264,2166,2150,4743,1866,4221,3514,1432,503,889,0,3062,4619,539,4546,1908,1988,879,1172,4374,2047,900,676,2132,1893,1634,277,163,1483,1822,2104,1477,1113,1643,687,3611,604,1039,4076,1035,1978,4768,1393,633,554,371,581,2992,363,2908,2669,4376,788,1625,4796,227,247,894,3730,987,2545,828],[3314,1182,2009,1244,3186,1076,2461,1012,566,989,1538,3030,2100,1615,2542,2413,2027,1661,2984,3633,2009,327,2574,1744,1986,496,1009,958,911,1912,1271,1161,517,1675,2579,2224,3062,0,1582,2717,1523,1659,1075,2248,2801,1327,1226,2395,2883,963,1671,1618,2797,2924,1665,1452,1145,1898,2052,1427,3583,775,3458,2333,1281,2282,1161,1910,1760,3368,2576,3226,2520,87,3018,630,1307,1372,3599,1484,2017,3036,3136,2197,1268,3802,1119,3526],[4836,528,3477,2800,4714,710,3939,2594,1099,2513,59,4563,3613,33,4124,3929,3466,3232,4522,5140,985,1686,4071,3319,3547,1746,2558,2538,2481,777,2770,569,1263,3199,4146,3801,4619,1582,0,4233,109,2983,2635,3774,4369,262,2644,3883,4366,2488,2999,3194,4360,4475,3247,2885,2571,3326,3634,3002,5096,1072,4970,3799,836,3864,2656,719,3264,4867,4150,4752,4059,1640,4540,1775,2328,283,5095,3004,929,4573,4672,3736,1349,5290,2287,5007],[603,3895,783,1874,486,3793,368,1844,3282,2153,4199,355,620,4266,1024,304,840,1135,333,915,4297,2782,199,1437,803,2490,2045,1898,1822,4298,1463,3875,3199,1042,531,802,539,2717,4233,0,4153,1403,1651,471,1466,3998,1605,380,269,1758,1387,1497,480,383,1306,1368,1671,977,1025,1363,866,3195,741,510,3638,1087,1577,4327,969,656,646,521,266,2641,309,2482,2174,3978,886,1235,4342,377,463,538,3262,1096,2072,833],[4756,540,3394,2752,4635,720,3855,2536,1065,2470,131,4486,3534,133,4065,3850,3380,3165,4445,5059,909,1646,3989,3266,3476,1663,2511,2482,2415,707,2691,581,1234,3122,4077,3735,4546,1523,109,4153,0,2891,2566,3696,4319,244,2559,3801,4282,2414,2907,3140,4289,4400,3187,2801,2488,3239,3572,2936,5015,979,4888,3714,727,3806,2577,654,3184,4784,4083,4673,3983,1577,4461,1687,2227,181,5012,2927,859,4496,4595,3660,1239,5205,2192,4922],[1979,2738,639,1534,1879,2678,1048,1266,2200,1636,2959,1759,880,3015,1867,1141,562,1038,1734,2240,2920,1858,1210,1526,1092,1271,1532,1286,1040,2939,597,2728,2176,701,1580,1427,1908,1659,2983,1403,2891,0,922,1051,2320,2775,460,1023,1455,833,16,1466,1723,1745,1300,340,537,431,1441,1028,2207,1912,2082,899,2299,1706,640,2975,632,1960,1651,1909,1338,1572,1703,1214,772,2710,2177,647,2969,1780,1867,1079,1882,2354,708,2070],[2243,2258,1001,638,2114,2147,1425,343,1636,715,2596,1956,1042,2669,1539,1349,1054,599,1910,2566,2882,1135,1521,851,913,966,610,366,172,2834,328,2236,1548,620,1511,1173,1988,1075,2635,1651,2566,922,0,1180,1881,2388,513,1352,1834,211,925,742,1726,1849,686,591,475,953,1034,382,2514,1667,2390,1313,2164,1294,291,2849,725,2306,1517,2154,1445,1004,1947,1019,1172,2401,2537,445,2910,1962,2062,1124,1920,2744,934,2472],[1067,3427,416,1435,941,3323,353,1380,2812,1702,3738,789,175,3807,925,173,523,682,749,1386,3878,2311,367,1057,374,2037,1592,1433,1351,3868,1004,3407,2728,576,538,537,879,2248,3774,471,3696,1051,1180,0,1403,3536,1170,268,677,1291,1037,1092,672,721,888,943,1229,627,701,900,1335,2747,1211,356,3203,868,1118,3894,517,1127,625,980,298,2172,770,2038,1797,3523,1357,770,3919,800,898,101,2850,1566,1665,1298],[1615,3909,1771,1569,1510,3758,1685,1798,3279,1866,4320,1399,1520,4401,478,1448,1894,1352,1351,1894,4746,2692,1577,1062,1230,2835,1811,1849,1983,4682,1959,3878,3134,1631,944,902,1172,2801,4369,1466,4319,2320,1881,1403,0,4108,2212,1624,1716,2086,2310,1187,1016,1206,1194,2072,2230,1958,895,1508,1829,3508,1767,1748,4018,620,2038,4689,1688,1806,829,1544,1265,2758,1487,2899,2940,4173,1948,1752,4768,1370,1418,1325,3801,2131,2739,2000],[4601,300,3250,2539,4477,477,3711,2337,837,2251,212,4325,3377,294,3867,3694,3244,2983,4282,4909,1113,1423,3840,3060,3301,1521,2297,2281,2231,921,2534,340,1001,2960,3899,3549,4374,1327,262,3998,244,2775,2388,3536,4108,0,2420,3653,4138,2246,2791,2935,4114,4232,2991,2661,2345,3105,3379,2751,4863,882,4737,3573,770,3607,2420,876,3029,4636,3900,4516,3819,1388,4305,1562,2150,236,4866,2766,1071,4334,4433,3495,1252,5062,2089,4781],[2207,2351,834,1151,2091,2275,1295,850,1781,1206,2613,1950,997,2676,1804,1308,824,860,1914,2501,2709,1404,1433,1274,1053,898,1109,861,598,2698,259,2337,1742,633,1634,1380,2047,1226,2644,1605,2559,460,513,1170,2212,2420,0,1243,1722,381,469,1186,1818,1890,1066,241,81,686,1319,749,2459,1592,2333,1154,2034,1594,224,2725,653,2225,1676,2127,1467,1140,1915,878,730,2382,2453,467,2749,1964,2060,1156,1687,2646,531,2363],[968,3563,410,1675,860,3470,86,1588,2962,1927,3851,736,318,3916,1149,177,460,918,712,1258,3922,2487,191,1322,635,2137,1815,1638,1524,3926,1126,3546,2890,731,702,794,900,2395,3883,380,3801,1023,1352,268,1624,3653,1243,0,487,1432,1007,1351,763,737,1145,1003,1313,597,969,1118,1216,2836,1089,142,3270,1122,1239,3957,634,983,808,893,384,2315,683,2121,1793,3624,1212,914,3967,757,844,370,2886,1410,1695,1131],[539,4051,888,2110,471,3957,427,2055,3450,2379,4335,423,792,4399,1286,504,910,1359,439,786,4374,2970,315,1694,1038,2619,2269,2107,2007,4387,1614,4034,3376,1215,794,1068,676,2883,4366,269,4282,1455,1834,677,1716,4138,1722,487,0,1920,1439,1747,707,553,1550,1481,1794,1052,1288,1577,751,3313,627,569,3737,1356,1726,4420,1122,506,907,488,531,2803,327,2599,2225,4105,730,1401,4422,457,500,762,3336,924,2151,643],[2358,2136,1051,815,2232,2038,1499,492,1530,831,2451,2079,1138,2521,1732,1453,1080,777,2036,2673,2690,1080,1611,1063,1066,781,739,493,222,2650,313,2117,1461,716,1669,1350,2132,963,2488,1758,2414,833,211,1291,2086,2246,381,1432,1920,0,840,954,1877,1986,892,538,319,961,1227,580,2625,1491,2499,1373,1978,1492,213,2667,797,2406,1685,2272,1572,884,2062,821,974,2244,2637,522,2720,2087,2187,1248,1716,2840,731,2562],[1962,2752,624,1534,1863,2692,1032,1269,2213,1640,2974,1743,866,3030,1856,1126,547,1031,1718,2223,2936,1869,1193,1521,1081,1285,1536,1290,1045,2956,600,2742,2188,692,1567,1415,1893,1671,2999,1387,2907,16,925,1037,2310,2791,469,1007,1439,840,0,1463,1708,1729,1295,340,546,415,1432,1025,2190,1928,2066,883,2316,1696,645,2991,621,1943,1637,1893,1323,1584,1687,1229,788,2726,2161,644,2986,1764,1851,1065,1898,2338,724,2054],[1999,2752,1189,431,1862,2611,1438,610,2117,744,3147,1700,1057,3227,946,1253,1300,478,1644,2335,3563,1537,1452,125,718,1660,662,662,812,3495,932,2723,1984,823,1133,747,1634,1618,3194,1497,3140,1466,742,1092,1187,2935,1186,1351,1747,954,1463,0,1357,1537,208,1140,1176,1274,520,444,2275,2322,2163,1391,2833,684,972,3502,944,2120,1085,1905,1235,1572,1730,1735,1898,2991,2337,819,3584,1692,1787,995,2640,2550,1668,2313],[676,3978,1084,1778,547,3859,792,1835,3349,2084,4321,403,846,4394,625,600,1179,1136,349,1004,4525,2806,641,1265,813,2650,1987,1892,1885,4505,1623,3955,3243,1192,226,612,277,2797,4360,480,4289,1723,1726,672,1016,4114,1818,763,707,1877,1708,1357,0,207,1206,1602,1870,1295,837,1373,940,3363,842,906,3836,777,1733,4528,1167,839,285,587,390,2729,479,2667,2468,4121,1026,1380,4563,381,458,664,3505,1233,2329,1040],[472,4107,1108,1952,340,3994,743,1986,3482,2252,4437,196,895,4508,832,603,1186,1276,144,804,4599,2951,576,1452,940,2748,2152,2042,2014,4588,1715,4085,3384,1281,409,790,163,2924,4475,383,4400,1745,1849,721,1206,4232,1890,737,553,1986,1729,1537,207,0,1375,1664,1949,1314,1021,1514,742,3460,639,877,3922,981,1827,4614,1237,631,488,382,423,2853,280,2755,2507,4229,821,1475,4640,173,254,742,3571,1030,2385,833],[1828,2826,984,577,1691,2693,1231,657,2189,877,3203,1528,849,3280,877,1053,1097,279,1474,2164,3559,1623,1251,227,515,1644,780,714,795,3503,807,2799,2068,631,980,596,1483,1665,3247,1306,3187,1300,686,888,1194,2991,1066,1145,1550,892,1295,208,1206,1375,0,986,1068,1079,392,322,2105,2331,1990,1182,2836,621,867,3515,748,1939,947,1734,1048,1610,1551,1704,1792,3031,2160,655,3584,1523,1620,793,2606,2373,1573,2130],[1969,2589,593,1193,1854,2509,1054,932,2012,1306,2855,1715,768,2918,1641,1074,584,741,1681,2261,2936,1609,1193,1208,871,1139,1200,957,724,2930,262,2574,1965,447,1428,1206,1822,1452,2885,1368,2801,340,591,943,2072,2661,241,1003,1481,538,340,1140,1602,1664,986,0,316,448,1178,696,2219,1832,2093,913,2269,1451,327,2959,435,1984,1479,1890,1241,1367,1678,1118,885,2623,2211,332,2978,1731,1826,938,1907,2404,726,2121],[2274,2273,906,1112,2156,2195,1367,802,1701,1150,2540,2013,1059,2604,1832,1372,900,879,1976,2571,2654,1324,1502,1269,1093,825,1056,808,541,2639,272,2259,1661,680,1681,1414,2104,1145,2571,1671,2488,537,475,1229,2230,2345,81,1313,1794,319,546,1176,1870,1949,1068,316,0,764,1341,747,2528,1524,2402,1228,1973,1616,203,2665,711,2296,1719,2193,1525,1059,1981,811,724,2311,2524,502,2693,2026,2123,1211,1638,2718,508,2436],[1562,3037,210,1460,1458,2958,632,1265,2460,1639,3297,1332,462,3358,1490,710,142,799,1305,1838,3327,2041,787,1302,738,1583,1526,1303,1113,3336,650,3023,2410,452,1163,1055,1477,1898,3326,977,3239,431,953,627,1958,3105,686,597,1052,961,415,1274,1295,1314,1079,448,764,0,1116,886,1801,2265,1675,484,2684,1361,748,3368,330,1559,1240,1489,908,1814,1281,1552,1197,3060,1782,530,3373,1352,1441,665,2290,1969,1101,1685],[1487,3217,958,946,1352,3085,1052,1049,2581,1255,3590,1190,742,3667,504,831,1084,462,1134,1823,3916,2015,1022,430,384,2001,1164,1105,1165,3868,1068,3190,2460,742,614,233,1113,2052,3634,1025,3572,1441,1034,701,895,3379,1319,969,1288,1227,1432,520,837,1021,392,1178,1341,1116,0,651,1762,2699,1653,1049,3198,275,1154,3882,815,1619,565,1395,759,1994,1229,2048,2045,3414,1830,857,3944,1180,1273,600,2941,2043,1848,1816],[1934,2606,850,580,1801,2485,1201,481,1975,809,2960,1639,800,3035,1156,1074,942,237,1589,2265,3265,1437,1263,524,575,1349,697,535,521,3217,491,2582,1870,444,1152,798,1643,1427,3002,1363,2936,1028,382,900,1508,2751,749,1118,1577,580,1025,444,1373,1514,322,696,747,886,651,0,2210,2049,2089,1116,2547,913,545,3232,573,2018,1148,1842,1132,1363,1643,1399,1472,2774,2246,385,3293,1641,1741,825,2297,2458,1251,2196],[277,4761,1626,2682,413,4659,1169,2690,4148,2977,5063,577,1486,5129,1538,1171,1659,1976,631,65,5125,3641,1026,2192,1637,3351,2873,2745,2685,5137,2329,4742,4062,1909,1151,1529,687,3583,5096,866,5015,2207,2514,1335,1829,4863,2459,1216,751,2625,2190,2275,940,742,2105,2219,2528,1801,1762,2210,0,4052,126,1316,4484,1716,2443,5169,1833,252,1225,370,1078,3507,567,3337,2976,4839,141,2102,5173,582,488,1392,4088,302,2901,270],[3798,929,2426,1987,3680,951,2887,1713,723,1755,1051,3535,2580,1103,3202,2895,2407,2264,3496,4094,1246,1048,3025,2446,2556,712,1762,1665,1536,1173,1745,936,864,2179,3159,2838,3611,775,1072,3195,979,1912,1667,2747,3508,882,1592,2836,3313,1491,1928,2322,3363,3460,2331,1832,1524,2265,2699,2049,4052,0,3925,2744,514,2951,1633,1184,2230,3817,3176,3716,3039,785,3504,714,1268,798,4044,1986,1262,3547,3644,2718,581,4234,1215,3951],[167,4636,1500,2567,301,4534,1043,2569,4023,2860,4936,463,1360,5002,1453,1045,1533,1855,519,176,5001,3518,899,2084,1517,3225,2756,2624,2561,5011,2203,4617,3938,1783,1046,1420,604,3458,4970,741,4888,2082,2390,1211,1767,4737,2333,1089,627,2499,2066,2163,842,639,1990,2093,2402,1675,1653,2089,126,3925,0,1190,4358,1619,2316,5043,1707,143,1126,258,957,3382,445,3211,2853,4713,184,1976,5048,473,385,1269,3963,391,2776,250],[1080,3493,325,1687,979,3405,148,1572,2900,1924,3768,864,333,3831,1270,313,343,935,844,1354,3811,2443,312,1373,690,2053,1811,1620,1484,3820,1062,3476,2835,699,838,894,1039,2333,3799,510,3714,899,1313,356,1748,3573,1154,142,569,1373,883,1391,906,877,1182,913,1228,484,1049,1116,1316,2744,1190,0,3168,1225,1172,3853,587,1075,941,1010,524,2252,804,2029,1672,3536,1300,868,3858,887,970,452,2774,1491,1585,1208],[4238,974,2859,2501,4124,1082,3314,2226,1088,2267,844,3984,3032,859,3702,3343,2826,2756,3949,4522,732,1529,3461,2957,3036,1198,2276,2178,2040,671,2213,1000,1259,2645,3637,3329,4076,1281,836,3638,727,2299,2164,3203,4018,770,2034,3270,3737,1978,2316,2833,3836,3922,2836,2269,1973,2684,3198,2547,4484,514,4358,3168,0,3454,2103,692,2685,4243,3661,4159,3499,1297,3948,1169,1578,567,4466,2455,750,3999,4095,3182,516,4650,1592,4365],[1453,3432,1187,1112,1322,3293,1198,1270,2796,1425,3818,1170,950,3897,262,961,1313,737,1114,1780,4175,2219,1132,566,623,2259,1346,1325,1414,4123,1343,3404,2666,1012,586,330,1035,2282,3864,1087,3806,1706,1294,868,620,3607,1594,1122,1356,1492,1696,684,777,981,621,1451,1616,1361,275,913,1716,2951,1619,1225,3454,0,1427,4135,1075,1609,493,1363,832,2229,1229,2312,2321,3651,1802,1133,4202,1153,1235,775,3209,2010,2123,1810],[2180,2324,848,927,2058,2232,1302,633,1727,998,2621,1908,957,2689,1651,1274,871,691,1867,2489,2800,1292,1422,1066,935,920,897,649,400,2773,114,2307,1666,546,1534,1244,1978,1161,2656,1577,2577,640,291,1118,2038,2420,224,1239,1726,213,645,972,1733,1827,867,327,203,748,1154,545,2443,1633,2316,1172,2103,1427,0,2795,609,2219,1562,2096,1407,1079,1884,934,927,2405,2449,353,2835,1918,2017,1085,1799,2649,706,2370],[4926,1175,3547,3151,4813,1346,4000,2892,1579,2898,771,4675,3723,714,4386,4033,3510,3444,4639,5206,277,2111,4148,3627,3727,1886,2919,2842,2720,71,2905,1215,1758,3337,4329,4018,4768,1910,719,4327,654,2975,2849,3894,4689,876,2725,3957,4420,2667,2991,3502,4528,4614,3515,2959,2665,3368,3882,3232,5169,1184,5043,3853,692,4135,2795,0,3377,4927,4351,4848,4191,1941,4637,1861,2233,664,5148,3147,212,4689,4785,3874,1112,5329,2270,5045],[1572,2931,284,1154,1451,2836,704,997,2327,1360,3230,1304,349,3297,1237,666,368,468,1265,1880,3363,1857,814,971,460,1522,1246,1041,897,3351,495,2913,2256,129,993,796,1393,1760,3264,969,3184,632,725,517,1688,3029,653,634,1122,797,621,944,1167,1237,748,435,711,330,815,573,1833,2230,1707,587,2685,1075,609,3377,0,1610,1047,1488,814,1681,1276,1520,1315,3010,1841,281,3403,1316,1414,503,2339,2042,1162,1765],[200,4542,1391,2514,297,4444,930,2499,3934,2801,4834,438,1268,4899,1462,957,1417,1788,494,280,4880,3438,796,2046,1451,3120,2695,2553,2478,4894,2105,4524,3854,1693,1026,1386,633,3368,4867,656,4784,1960,2306,1127,1806,4636,2225,983,506,2406,1943,2120,839,631,1939,1984,2296,1559,1619,2018,252,3817,143,1075,4243,1609,2219,4927,1610,0,1116,262,894,3290,390,3103,2728,4607,230,1884,4928,457,390,1193,3842,439,2657,201],[959,3752,1034,1511,828,3627,863,1592,3118,1820,4109,677,778,4183,378,630,1147,918,621,1289,4363,2564,748,987,627,2466,1727,1650,1668,4332,1458,3727,3006,1042,115,354,554,2576,4150,646,4083,1651,1517,625,829,3900,1676,808,907,1685,1637,1085,285,488,947,1479,1719,1240,565,1148,1225,3176,1126,941,3661,493,1562,4351,1047,1116,0,870,437,2512,741,2493,2362,3919,1309,1217,4397,659,741,575,3357,1517,2201,1318],[93,4407,1302,2312,42,4301,861,2322,3790,2606,4717,206,1139,4785,1205,822,1350,1607,260,430,4815,3276,702,1825,1268,3011,2503,2377,2324,4818,1982,4387,3700,1556,788,1161,371,3226,4752,521,4673,1909,2154,980,1544,4516,2127,893,488,2272,1893,1905,587,382,1734,1890,2193,1489,1395,1842,370,3716,258,1010,4159,1363,2096,4848,1488,262,870,0,711,3151,212,3004,2682,4499,439,1750,4861,214,130,1030,3779,649,2589,459],[802,3702,698,1621,670,3593,429,1612,3081,1907,4023,510,473,4092,801,212,789,898,464,1133,4176,2564,312,1172,559,2328,1801,1667,1614,4165,1294,3681,2990,861,325,537,581,2520,4059,266,3983,1338,1445,298,1265,3819,1467,384,531,1572,1323,1235,390,423,1048,1241,1525,908,759,1132,1078,3039,957,524,3499,832,1407,4191,814,894,437,711,0,2447,512,2332,2092,3812,1119,1056,4216,516,616,323,3148,1331,1963,1081],[3239,1255,1927,1210,3112,1154,2381,963,647,970,1597,2956,2022,1673,2487,2336,1944,1595,2911,3556,2028,385,2495,1697,1917,423,980,910,844,1939,1190,1235,604,1598,2512,2161,2992,87,1640,2641,1577,1572,1004,2172,2758,1388,1140,2315,2803,884,1584,1572,2729,2853,1610,1367,1059,1814,1994,1363,3507,785,3382,2252,1297,2229,1079,1941,1681,3290,2512,3151,2447,0,2943,558,1227,1421,3521,1406,2039,2963,3063,2123,1249,3724,1035,3446],[296,4198,1091,2127,177,4093,656,2124,3582,2417,4506,101,927,4573,1102,610,1142,1410,137,621,4605,3073,494,1656,1071,2799,2312,2179,2118,4607,1770,4178,3495,1346,643,996,363,3018,4540,309,4461,1703,1947,770,1487,4305,1915,683,327,2062,1687,1730,479,280,1551,1678,1981,1281,1229,1643,567,3504,445,804,3948,1229,1884,4637,1276,390,741,212,512,2943,0,2792,2475,4287,608,1540,4650,135,176,824,3569,822,2379,587],[3085,1532,1712,1476,2967,1489,2172,1158,1052,1327,1748,2824,1869,1807,2553,2183,1693,1597,2786,3379,1871,944,2311,1853,1868,137,1292,1122,923,1839,1043,1525,1083,1476,2468,2166,2908,630,1775,2482,1687,1214,1019,2038,2899,1562,878,2121,2599,821,1229,1735,2667,2755,1704,1118,811,1552,2048,1399,3337,714,3211,2029,1169,2312,934,1861,1520,3103,2493,3004,2332,558,2792,0,694,1508,3329,1286,1903,2837,2934,2014,905,3520,551,3237],[2751,2173,1399,1786,2651,2153,1821,1457,1742,1749,2312,2529,1622,2357,2522,1904,1333,1589,2503,3008,2159,1599,1981,1994,1756,814,1677,1446,1179,2192,988,2172,1777,1332,2306,2091,2669,1307,2328,2174,2227,772,1172,1797,2940,2150,730,1793,2225,974,788,1898,2468,2507,1792,885,724,1197,2045,1472,2976,1268,2853,1672,1578,2321,927,2233,1315,2728,2362,2682,2092,1227,2475,694,0,2046,2942,1188,2212,2549,2638,1808,1125,3113,247,2830],[4582,520,3217,2610,4461,684,3678,2384,950,2334,279,4313,3360,312,3909,3676,3201,3001,4272,4882,886,1517,3813,3116,3309,1488,2370,2330,2253,702,2518,558,1125,2950,3910,3572,4376,1372,283,3978,181,2710,2401,3523,4173,236,2382,3624,4105,2244,2726,2991,4121,4229,3031,2623,2311,3060,3414,2774,4839,798,4713,3536,567,3651,2405,664,3010,4607,3919,4499,3812,1421,4287,1508,2046,0,4835,2755,849,4324,4422,3489,1072,5028,2011,4744],[349,4773,1618,2736,481,4675,1157,2728,4165,3026,5063,639,1498,5128,1637,1187,1640,2015,696,104,5097,3668,1026,2260,1678,3349,2920,2782,2708,5115,2335,4754,4085,1924,1227,1597,788,3599,5095,886,5012,2177,2537,1357,1948,4866,2453,1212,730,2637,2161,2337,1026,821,2160,2211,2524,1782,1830,2246,141,4044,184,1300,4466,1802,2449,5148,1841,230,1309,439,1119,3521,608,3329,2942,4835,0,2115,5147,652,567,1422,4059,213,2878,144],[1836,2659,556,936,1711,2560,985,736,2050,1108,2968,1559,616,3037,1337,931,616,409,1517,2150,3148,1575,1090,880,591,1273,996,776,616,3125,242,2640,1975,194,1184,913,1625,1484,3004,1235,2927,647,445,770,1752,2766,467,914,1401,522,644,819,1380,1475,655,332,502,530,857,385,2102,1986,1976,868,2455,1133,353,3147,281,1884,1217,1750,1056,1406,1540,1286,1188,2755,2115,0,3185,1569,1668,733,2139,2318,998,2042],[4936,1368,3559,3248,4827,1534,4006,2976,1730,3006,979,4692,3745,925,4449,4052,3515,3498,4659,5208,79,2239,4158,3707,3770,1943,3020,2928,2789,152,2942,1407,1909,3371,4369,4069,4796,2017,929,4342,859,2969,2910,3919,4768,1071,2749,3967,4422,2720,2986,3584,4563,4640,3584,2978,2693,3373,3944,3293,5173,1262,5048,3858,750,4202,2835,212,3403,4928,4397,4861,4216,2039,4650,1903,2212,849,5147,3185,0,4708,4802,3904,1088,5323,2272,5039],[307,4218,1154,2100,171,4109,742,2118,3598,2397,4537,34,967,4606,1005,656,1217,1404,51,643,4665,3077,575,1611,1065,2838,2294,2174,2130,4661,1805,4197,3504,1374,574,947,227,3036,4573,377,4496,1780,1962,800,1370,4334,1964,757,457,2087,1764,1692,381,173,1523,1731,2026,1352,1180,1641,582,3547,473,887,3999,1153,1918,4689,1316,457,659,214,516,2963,135,2837,2549,4324,652,1569,4708,0,100,839,3632,863,2442,659],[218,4318,1245,2197,93,4209,824,2218,3698,2495,4636,110,1064,4705,1075,751,1304,1504,152,550,4759,3177,658,1704,1165,2936,2393,2273,2230,4757,1903,4297,3605,1473,663,1041,247,3136,4672,463,4595,1867,2062,898,1418,4433,2060,844,500,2187,1851,1787,458,254,1620,1826,2123,1441,1273,1741,488,3644,385,970,4095,1235,2017,4785,1414,390,741,130,616,3063,176,2934,2638,4422,567,1668,4802,100,0,939,3725,776,2534,589],[1119,3379,460,1347,989,3271,454,1306,2760,1619,3699,832,203,3769,848,259,577,599,788,1445,3865,2248,457,957,278,2006,1510,1360,1293,3850,973,3358,2670,539,502,444,894,2197,3736,538,3660,1079,1124,101,1325,3495,1156,370,762,1248,1065,995,664,742,793,938,1211,665,600,825,1392,2718,1269,452,3182,775,1085,3874,503,1193,575,1030,323,2123,824,2014,1808,3489,1422,733,3904,839,939,0,2842,1633,1664,1371],[3853,1402,2479,2366,3746,1470,2922,2057,1305,2182,1352,3615,2675,1372,3444,2977,2431,2483,3583,4122,1038,1576,3077,2758,2730,988,2165,2018,1828,1069,1899,1420,1444,2318,3320,3043,3730,1268,1349,3262,1239,1882,1920,2850,3801,1252,1687,2886,3336,1716,1898,2640,3505,3571,2606,1907,1638,2290,2941,2297,4088,581,3963,2774,516,3209,1799,1112,2339,3842,3357,3779,3148,1249,3569,905,1125,1072,4059,2139,1088,3632,3725,2842,0,4235,1190,3951],[558,4974,1812,2950,692,4878,1351,2939,4369,3239,5259,852,1703,5322,1838,1395,1828,2227,908,237,5272,3877,1228,2473,1890,3543,3133,2993,2916,5294,2536,4956,4291,2129,1437,1809,987,3802,5290,1096,5205,2354,2744,1566,2131,5062,2646,1410,924,2840,2338,2550,1233,1030,2373,2404,2718,1969,2043,2458,302,4234,391,1491,4650,2010,2649,5329,2042,439,1517,649,1331,3724,822,3520,3113,5028,213,2318,5323,863,776,1633,4235,0,3059,284],[2663,2079,1288,1541,2556,2040,1733,1211,1597,1502,2265,2424,1490,2318,2335,1788,1242,1386,2393,2937,2226,1393,1886,1768,1582,647,1430,1199,933,2236,779,2074,1612,1159,2153,1911,2545,1119,2287,2072,2192,708,934,1665,2739,2089,531,1695,2151,731,724,1668,2329,2385,1573,726,508,1101,1848,1251,2901,1215,2776,1585,1592,2123,706,2270,1162,2657,2201,2589,1963,1035,2379,551,247,2011,2878,998,2272,2442,2534,1664,1190,3059,0,2775],[384,4695,1530,2703,497,4601,1069,2677,4092,2986,4976,640,1429,5040,1663,1125,1544,1969,696,247,4989,3607,952,2242,1635,3261,2878,2730,2644,5010,2257,4677,4017,1854,1226,1583,828,3526,5007,833,4922,2070,2472,1298,2000,4781,2363,1131,643,2562,2054,2313,1040,833,2130,2121,2436,1685,1816,2196,270,3951,250,1208,4365,1810,2370,5045,1765,201,1318,459,1081,3446,587,3237,2830,4744,144,2042,5039,659,589,1371,3951,284,2775,0]]}

/***/ })
/******/ ]);